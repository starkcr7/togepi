#include <stdio.h>

int main() {
    int n = 5; // Number of processes
    int m = 3; // Number of resources

    // Allocation matrix
    int alloc[5][3] = { {0, 1, 0}, 
                        {2, 0, 0}, 
                        {3, 0, 2}, 
                        {2, 1, 1}, 
                        {0, 0, 2} };

    // Maximum demand matrix
    int max[5][3] = { {7, 5, 3}, 
                      {3, 2, 2}, 
                      {9, 0, 2}, 
                      {2, 2, 2}, 
                      {4, 3, 3} };

    // Available resources
    int avail[3] = {3, 3, 2};

    // Finished array to indicate if a process can finish
    int finished[5] = {0};
    
    // Need matrix
    int need[5][3];

    // Calculate need matrix
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            need[i][j] = max[i][j] - alloc[i][j];
        }
    }

    int safeSequence[5];
    int index = 0;

    // Finding the safe sequence
    for (int count = 0; count < n; count++) {
        for (int i = 0; i < n; i++) {
            if (finished[i] == 0) { // If process i is not finished
                int canFinish = 1;
                for (int j = 0; j < m; j++) {
                    if (need[i][j] > avail[j]) { // Check if resources needed are available
                        canFinish = 0;
                        break;
                    }
                }
                
                if (canFinish) { // If the process can finish
                    for (int j = 0; j < m; j++) {
                        avail[j] += alloc[i][j]; // Release the resources
                    }
                    safeSequence[index++] = i;
                    finished[i] = 1; // Mark process as finished
                }
            }
        }
    }

    // Check if all processes are finished
    int allFinished = 1;
    for (int i = 0; i < n; i++) {
        if (finished[i] == 0) {
            allFinished = 0;
            printf("The following system is not safe\n");
            break;
        }
    }

    // Print the safe sequence if it exists
    if (allFinished) {
        printf("Following is the SAFE Sequence:\n");
        for (int i = 0; i < n - 1; i++) {
            printf("P%d -> ", safeSequence[i]);
        }
        printf("P%d\n", safeSequence[n - 1]);
    }

    return 0;
}
